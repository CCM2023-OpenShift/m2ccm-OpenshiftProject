name: Build & Deploy Quarkus on OpenShift

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven

      # ‚úÖ NOUVEAU : G√©n√©rer un tag unique
      - name: Generate unique image tag
        id: set-tag
        run: |
          TAG="v$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "üì¶ Tag de l'image: $TAG"

      - name: Build Quarkus Application
        run: ./mvnw clean package -DskipTests

      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvf oc.tar.gz
          sudo mv oc /usr/local/bin/

      - name: Login to OpenShift
        env:
          OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
          OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
        run: |
          oc login $OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify
          oc project $OPENSHIFT_PROJECT

      - name: Manage BuildConfig and ImageStream
        env:
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
        run: |
          echo "üîç V√©rification de l'ImageStream..."
          if ! oc get is quarkus-app -n $OPENSHIFT_PROJECT &>/dev/null; then
            echo "üì¶ Cr√©ation de l'ImageStream..."
            oc create is quarkus-app -n $OPENSHIFT_PROJECT
          fi
          
          echo "üîç V√©rification du BuildConfig..."
          if ! oc get bc quarkus-app -n $OPENSHIFT_PROJECT &>/dev/null; then
            echo "üõ†Ô∏è Cr√©ation du BuildConfig..."
            oc new-build --binary --strategy=docker --name=quarkus-app -n $OPENSHIFT_PROJECT
          else
            echo "üîÑ Mise √† jour du BuildConfig existant..."
            oc patch bc quarkus-app -n $OPENSHIFT_PROJECT --type=merge -p '{"spec":{"source":{"dockerfilePath":"Dockerfile"}}}'
          fi

      - name: Configure Build Resources
        env:
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
        run: |
          echo "‚öôÔ∏è Configuration des ressources pour le build..."
          oc patch bc quarkus-app -n $OPENSHIFT_PROJECT --type=merge -p '{
            "spec": {
              "resources": {
                "limits": {
                  "memory": "2Gi",
                  "cpu": "1"
                },
                "requests": {
                  "memory": "1Gi",
                  "cpu": "500m"
                }
              }
            }
          }'

      - name: Clean up previous failed builds
        env:
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
        run: |
          echo "üßπ Nettoyage des builds √©chou√©s..."
          oc delete build -l buildconfig=quarkus-app,status=failed -n $OPENSHIFT_PROJECT --ignore-not-found=true

      - name: Build and Push Image to OpenShift ImageStream
        env:
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
          IMAGE_TAG: ${{ steps.set-tag.outputs.tag }}
        run: |
          # Utiliser directement le Dockerfile.jvm corrig√©
          echo "üìù Pr√©paration du Dockerfile..."
          cp src/main/docker/Dockerfile.jvm Dockerfile
          
          echo "üöÄ D√©marrage d'un nouveau build avec tag $IMAGE_TAG..."
          timeout 15m oc start-build quarkus-app --from-dir=. --follow -n $OPENSHIFT_PROJECT || {
            echo "‚ùå Build √©chou√©, v√©rification des logs..."
            BUILD_NAME=$(oc get builds -l buildconfig=quarkus-app -n $OPENSHIFT_PROJECT --sort-by=.metadata.creationTimestamp -o name | tail -n 1)
            oc logs $BUILD_NAME -n $OPENSHIFT_PROJECT
            exit 1
          }
          
          # ‚úÖ Tag l'image avec le tag unique ET latest
          echo "üè∑Ô∏è Tag de l'image avec $IMAGE_TAG et latest..."
          oc tag $OPENSHIFT_PROJECT/quarkus-app:latest $OPENSHIFT_PROJECT/quarkus-app:$IMAGE_TAG
          
          echo "‚úÖ Build termin√© avec succ√®s! Tag: $IMAGE_TAG"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvf oc.tar.gz
          sudo mv oc /usr/local/bin/

      - name: Login to OpenShift
        env:
          OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
          OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
        run: |
          oc login $OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify
          oc project $OPENSHIFT_PROJECT

      - name: Apply OpenShift Deployment YAML
        env:
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
        run: |
          echo "üìÑ Application des configurations de d√©ploiement..."
          oc apply -f infrastructure/quarkus-deployment.yaml -n $OPENSHIFT_PROJECT

      - name: Deploy to OpenShift with unique tag
        env:
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        run: |
          echo "üîÑ D√©ploiement avec le tag unique: $IMAGE_TAG"
          
          # ‚úÖ Utiliser le tag unique au lieu de latest
          oc set image deployment/quarkus-app quarkus-app=image-registry.openshift-image-registry.svc:5000/$OPENSHIFT_PROJECT/quarkus-app:$IMAGE_TAG
          
          # ‚úÖ Force imagePullPolicy: Always
          oc patch deployment/quarkus-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"quarkus-app","imagePullPolicy":"Always"}]}}}}'
          
          echo "üîÑ Ajout d'une annotation pour forcer le red√©ploiement..."
          oc patch deployment/quarkus-app -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"deployment.kubernetes.io/revision\":\"$(date +%s)\"}}}}}"
          
          echo "‚è≥ Attente du d√©ploiement..."
          timeout 5m oc rollout status deployment/quarkus-app -n $OPENSHIFT_PROJECT || {
            echo "‚ùå D√©ploiement √©chou√©, v√©rification des logs..."
            POD_NAME=$(oc get pods -l app=quarkus-app -n $OPENSHIFT_PROJECT --sort-by=.metadata.creationTimestamp -o name | tail -n 1)
            oc logs $POD_NAME -n $OPENSHIFT_PROJECT
            exit 1
          }

      - name: Display API Route URL
        env:
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_PROJECT }}
        run: |
          ROUTE=$(oc get route quarkus-route -n $OPENSHIFT_PROJECT -o jsonpath='{.spec.host}')
          echo "üîó Votre API est disponible √†: https://$ROUTE"
          echo "üì¶ Image d√©ploy√©e: ${{ needs.build-and-push.outputs.image-tag }}"